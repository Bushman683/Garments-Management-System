package oop.lab.task.pkg3;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;

class Garment {

    public String id;
    public String name;
    public String description;
    public String size;
    public String color;
    public double price;
    public int stockQuantity;

    public Garment(String id, String name, String description, String size, String color, double price, int stockQuantity) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.size = size;
        this.color = color;
        this.price = price;
        this.stockQuantity = stockQuantity;
    }

    void updateStock(int quantity) {
        this.stockQuantity = quantity;
    }

    double calculateDiscountPrice(double discountPercentage) {
        double discount = price * (discountPercentage / 100);
        return price - discount;
    }
}

class Fabric {

    public String id;
    public String type;
    public String color;
    public double pricePerMeter;

    public Fabric(String id, String type, String color, double pricePerMeter) {
        this.id = id;
        this.type = type;
        this.color = color;
        this.pricePerMeter = pricePerMeter;
    }

    double calculateCost(double meters) {
        return pricePerMeter * meters;
    }
}

class Supplier {

    public String id;
    public String name;
    public String contactInfo;
    List<Fabric> suppliedFabric = new ArrayList<>();

    public Supplier(String id, String name, String contactInfo) {
        this.id = id;
        this.name = name;
        this.contactInfo = contactInfo;
    }

    void addFabric(Fabric fabric) {
        suppliedFabric.add(fabric);
    }

    List<Fabric> getSuppliedFabrics() {
        return suppliedFabric;
    }
}

class Order {

    public String orderId;
    public Date orderDate;
    public List<Garment> garments = new ArrayList<>();
    private double totalAmount;

    public Order(String orderId, Date orderDate) {
        this.orderId = orderId;
        this.orderDate = orderDate;
    }

    void addGarment(Garment garment) {
        garments.add(garment);
    }

    double calculateTotalAmount() {
        totalAmount = 0;
        for (Garment g : garments) {
            totalAmount += g.price;
        }
        return totalAmount;
    }

    void printOrderDetails() {
        System.out.println("--------------------------");
        System.out.println("Order Details");
        System.out.println("--------------------------");
        for (Garment g : garments) {
            System.out.println("Name: " + g.name);
            System.out.println("Price: " + g.price);
            System.out.println("Description: " + g.description);
            System.out.println("--------------------------");
        }
        System.out.println("Total Amount: " + calculateTotalAmount());
    }
}

class Customer {

    public String customerId;
    public String name;
    public String email;
    public String phone;
    private List<Order> orderHistory = new ArrayList<>();

    public Customer(String customerId, String name, String email, String phone) {
        this.customerId = customerId;
        this.name = name;
        this.email = email;
        this.phone = phone;
    }

    void placeOrder(Order order) {
        order.printOrderDetails();
        orderHistory.add(order);
        System.out.println("Order Placed Successfully!");
    }

    List<Order> viewOrders() {
        return orderHistory;
    }
}

class Inventory {

    List<Garment> garments = new ArrayList<>();

    public Inventory() {
    }

    void addGarment(Garment garment) {
        garments.add(garment);
    }

    void removeGarment(String id) {
        garments.removeIf(g -> g.id.equals(id));
    }

    Garment findGarment(String id) {
        for (Garment g : garments) {
            if (g.id.equals(id)) {
                return g;
            }
        }
        return null;
    }

    void listGarments() {
        if (garments.isEmpty()) {
            System.out.println("No garments in inventory.");
        } else {
            System.out.println("Garments in Inventory:");
            for (Garment g : garments) {
                System.out.println("ID: " + g.id + ", Name: " + g.name + ", Stock: " + g.stockQuantity + ", Price: " + g.price);
            }
        }
    }
}

public class OopLabTask3 {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Inventory inventory = new Inventory();
        List<Customer> customers = new ArrayList<>();
        boolean exit = false;
        while (!exit) {
            System.out.println("\n--- Garment Management System ---");
            System.out.println("1. Add Garment to Inventory");
            System.out.println("2. Remove Garment from Inventory");
            System.out.println("3. View Inventory");
            System.out.println("4. Add Customer");
            System.out.println("5. Place Order");
            System.out.println("6. View Customer Orders");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();
            switch (choice) {

                case 1:

                    System.out.print("Enter Garment ID: ");
                    String id = scanner.nextLine();
                    System.out.print("Enter Garment Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Description: ");
                    String description = scanner.nextLine();
                    System.out.print("Enter Size: ");
                    String size = scanner.nextLine();
                    System.out.print("Enter Color: ");
                    String color = scanner.nextLine();
                    System.out.print("Enter Price: ");
                    double price = scanner.nextDouble();
                    System.out.print("Enter Stock Quantity: ");
                    int stock = scanner.nextInt();
                    scanner.nextLine();
                    Garment garment = new Garment(id, name, description, size, color, price, stock);
                    inventory.addGarment(garment);
                    System.out.println("Garment added to inventory.");
                    break;

                case 2:

                    System.out.print("Enter Garment ID to Remove: ");
                    String removeId = scanner.nextLine();
                    inventory.removeGarment(removeId);
                    System.out.println("Garment removed (if it existed).");
                    break;

                case 3:

                    inventory.listGarments();
                    break;

                case 4:

                    System.out.print("Enter Customer ID: ");
                    String customerId = scanner.nextLine();
                    System.out.print("Enter Customer Name: ");
                    String customerName = scanner.nextLine();
                    System.out.print("Enter Email: ");
                    String email = scanner.nextLine();
                    System.out.print("Enter Phone: ");
                    String phone = scanner.nextLine();
                    Customer customer = new Customer(customerId, customerName, email, phone);
                    customers.add(customer);
                    System.out.println("Customer added.");
                    break;

                case 5:

                    System.out.print("Enter Customer ID: ");
                    String orderCustomerId = scanner.nextLine();
                    Customer currentCustomer = null;
                    for (Customer c : customers) {
                        if (c.customerId.equals(orderCustomerId)) {
                            currentCustomer = c;
                            break;
                        }
                    }
                    if (currentCustomer != null) {
                        Order order = new Order("O" + (int) (Math.random() * 10000), new Date());
                        boolean addMore = true;
                        while (addMore) {
                            System.out.print("Enter Garment ID to Add to Order: ");
                            String garmentId = scanner.nextLine();
                            Garment foundGarment = inventory.findGarment(garmentId);
                            if (foundGarment != null) {
                                order.addGarment(foundGarment);
                                System.out.println("Garment added to order.");
                            } else {
                                System.out.println("Garment not found.");
                            }
                            System.out.print("Add another garment to the order? (yes/no): ");
                            String response = scanner.nextLine();
                            if (response.equalsIgnoreCase("no")) {
                                addMore = false;
                            }
                        }
                        currentCustomer.placeOrder(order);
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 6:

                    System.out.print("Enter Customer ID: ");
                    String viewCustomerId = scanner.nextLine();
                    Customer viewCustomer = null;
                    for (Customer c : customers) {
                        if (c.customerId.equals(viewCustomerId)) {
                            viewCustomer = c;
                            break;
                        }
                    }
                    if (viewCustomer != null) {
                        List<Order> orders = viewCustomer.viewOrders();
                        if (orders.isEmpty()) {
                            System.out.println("No orders placed yet.");
                        } else {
                            for (Order o : orders) {
                                o.printOrderDetails();
                            }
                        }
                    } else {
                        System.out.println("Customer not found.");
                    }
                    break;

                case 7:

                    exit = true;
                    System.out.println("Exiting Garment Management System.");
                    break;
                default:
                    System.out.println("Invalid option. Please try again.");
                    break;
            }
        }
        scanner.close();
    }
}
